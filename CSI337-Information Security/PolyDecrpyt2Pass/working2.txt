//Poly-alphabetic Substitution Cipher - 2 Pass

#include<iostream>
#include<fstream>
#include<string>
#include<cstdlib>
#include<ctime>
using namespace std;




int main() {
	int counter = 0, counter2 = 0, counter3 = 0;
	int randnum = 0;
	int revnum = 0;
	char *ptr1;

	char arr1[] = { 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z' };  //regular characters

	string sentence;

	ifstream input("cipher15.txt");
	ofstream output("decrypted.txt");

	if (!input) {
		cout << "File Not Found !";
		return 1;
	}

	while (getline(input, sentence)) {
		while (sentence[counter] != '\0') {
			counter++;
		}
	}

	input.clear();
	input.seekg(0, ios::beg);  //pull up the file counter back to beginning

	ptr1 = new char[counter];

	while (getline(input, sentence)) {
		while (sentence[counter2] != '\0') {
			ptr1[counter2] = sentence[counter2];    //populate first array
			counter2++;
		}
	}

	counter2 = 0;  // reset counter2 to 0 for reuse

	while (counter2<counter) {
		for (int i = 0; i < 26; i++)
		{
			if (ptr1[counter2] == arr1[i])
			{
				revnum = (i - counter3 + 26) % 26;
				if (revnum < 0)
				{
					revnum += 26;
				}
				ptr1[counter2] = arr1[revnum];
				//cout << arr1[revnum];
				//system("pause");
				counter3++;
				break;
			}


		}
		output << ptr1[counter2];
		counter2++;
	}


	input.close();
	output.close();



	counter = 0, counter2 = 0, counter3 = 0;
	randnum = 0;
	revnum = 0;
	char *ptr2;

	

	string sentence2;

	ifstream input2("decrypted.txt");
	

	if (!input2) {
		cout << "File Not Found !";
		return 1;
	}

	while (getline(input2, sentence2)) {
		while (sentence2[counter] != '\0') {
			counter++;
		}
	}

	input2.clear();
	input2.seekg(0, ios::beg);  //pull up the file counter back to beginning

	ptr2 = new char[counter];

	while (getline(input2, sentence2)) {
		while (sentence2[counter2] != '\0') {
			ptr2[counter2] = sentence2[counter2];    //populate first array
			counter2++;
		}
	}
	input2.close();
	ofstream output2("decrypted.txt");
	counter2 = 0;  // reset counter2 to 0 for reuse
	

	while (counter2<counter) {
		for (int i = 0; i < 26; i++)
		{
			if (ptr2[counter2] == arr1[i])
			{
				revnum = (i - counter3 + 26) % 26;
				if (revnum < 0)
				{
					revnum += 26;
				}
				ptr2[counter2] = arr1[revnum];
				counter3++;
				break;
			}


		}
		output2 << ptr2[counter2];
		counter2++;
	}


	
	output2.close();
	return 0;
}





/*
//encryption 2 pass code//

int main() {
	int counter = 0, counter2 = 0, counter3 = 0;
	int randnum;
	char *ptr1;
	string sentence;

	char arr1[] = { 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z' };  //regular characters

	

	ifstream input("secret.txt");
	ofstream output("cipher15.txt");

	if (!input) {
		cout << "File Not Found !";
		return 1;
	}

	while (getline(input, sentence)) {
		while (sentence[counter] != '\0') {
			counter++;
		}
	}

	input.clear();
	input.seekg(0, ios::beg);  //pull up the file counter back to beginning

	ptr1 = new char[counter];

	while (getline(input, sentence)) {
		while (sentence[counter2] != '\0') {
			ptr1[counter2] = sentence[counter2];    //populate first array
			counter2++;
		}
	}

	counter2 = 0;  // reset counter2 to 0 for reuse

	while (counter2<counter) {
		for (int i = 0; i<26; i++) {
			if (toupper(ptr1[counter2]) == toupper(arr1[i])) {
				randnum = (i + counter3) % 26;   // use modulo math to create the remainder of (i+counter3)%26 which will be from 0 to 25
				ptr1[counter2] = arr1[randnum];   //replace the original letter with a new letter based on value of randnum
				counter3++;
				break;
			}
		}

		output << ptr1[counter2];
		counter2++;
	}


	input.close();
	output.close();


	counter = 0, counter2 = 0, counter3 = 0;
	randnum=0;
	char *ptr2;
	string sentence2;



	ifstream input2("cipher15.txt");
	


	if (!input2) {
		cout << "File Not Found !";
		return 1;
	}

	while (getline(input2, sentence2)) {
		while (sentence[counter] != '\0') {
			counter++;
		}
	}

	input2.clear();
	input2.seekg(0, ios::beg);  //pull up the file counter back to beginning

	ptr2 = new char[counter];

	while (getline(input2, sentence2)) {
		while (sentence2[counter2] != '\0') {
			ptr2[counter2] = sentence2[counter2];    //populate first array
			counter2++;
		}
	}
	input2.close();
	ofstream output2("cipher15.txt");
	counter2 = 0;  // reset counter2 to 0 for reuse

	while (counter2<counter) {
		for (int i = 0; i<26; i++) {
			if (toupper(ptr2[counter2]) == toupper(arr1[i])) {
				randnum = (i + counter3) % 26;   // use modulo math to create the remainder of (i+counter3)%26 which will be from 0 to 25
				ptr2[counter2] = arr1[randnum];   //replace the original letter with a new letter based on value of randnum
				counter3++;
				break;
			}
		}

		output2 << ptr2[counter2];
		counter2++;
	}


	
	output2.close();



	return 0;
}
*/