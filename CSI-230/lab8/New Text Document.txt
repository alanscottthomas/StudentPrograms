//Assignment: #8, Chapter 9, Problem 2
//Name: Alan Thomas
//3/24/2015
//Purpose: Allow for a user to search an array for
//         a number utilizing linear search.


#include <iostream>

using namespace std;
void searchscores(int s[], int size){
	int lotto, position;
	bool flag=false;
	cout<<"Enter the lottery numer to search for: ";
	cin>>lotto;

	for(int i=0;i<size;i++){
		if(lotto==s[i]){
		flag=true;
		position=i+1;
		}
	}

	if(flag==true){
		cout<<endl<<"The Value was found at position# "<<position<<endl;
		}
	else{
		cout<<endl<<"Value NOT found"<<endl;
		}
	}

int main(){
const int SIZE=10;
int lottery[SIZE]={13579,26791,26792,3345,55555,62483,77777,79422,85647,93121},user=0,i=0;


searchscores(lottery, SIZE); //Sending user input to function.
system("PAUSE");
return 0;
}




//Assignment: #8, Chapter 9, Problem 3
//Name: Alan Thomas
//3/24/2015
//Purpose: Allow for a user to search an array for
//         a number utilizing binary search.


#include <iostream>

using namespace std;

//Execution begins
int main(){
const int SIZE=10;
int lottery[SIZE]={13579,26791,26792,3345,55555,62483,77777,79422,85647,93121},user=0,i=0;
int temp;
bool flag=false;
int search, first=0, middle, position =-1;
int last =SIZE-1;
//Sorting lottery array large to small
do{
flag=false;
	for(int i=0;i<SIZE-1;i++){                     
		if(lottery[i+1]<lottery[i]){                                                                                    
			temp=lottery[i];
			lottery[i]=lottery[i+1];
			lottery[i+1]=temp;
			flag=true;
			}
}
}while(flag);
/*Verifying lottery is sorted

             for(i=0;i<10;i++){
                  cout<<endl<<lottery[i];
                  }
                                   
             cout<<endl;
*/

cout<<"Enter the lottery number to search for: ";
cin>>search;


	while(!flag && first<=last){
		middle=(first+last)/2;

		if(lottery[middle]==search){
			flag=true;
			position = middle+1;
		}
		else if(lottery[middle]>search){
			last = middle-1;
		}
		else{first=middle+1;}
	}


	if(flag){
		cout<<"Number was found at position# "<<position<<endl;
	}
	else{
		cout<<"Number was NOT found"<<endl;
	}

system("PAUSE");
return 0;
}


//Assignment: #8, Chapter 9, Problem A
//Name: Alan Thomas
//3/24/2015
//Purpose: Allow for a user to search a class for a value
//         utilizing binary search.


#include <iostream>

using namespace std;
//inventory class start
class Inventory{
private:
	int quantity;
public:
	void setquantity(int q);
	int getquantity();
};
void Inventory::setquantity(int q){
	quantity = q;
}

int Inventory::getquantity(){
	return quantity;
}


//begin execution
int main(){
	const int SIZE = 5;
	bool flag;
	int temp, temp2,search, first=0, middle, position =-1;;
    int last =SIZE-1;   
	Inventory New[SIZE];
	//setting values
    New[0].setquantity(5);
	New[1].setquantity(8);
	New[2].setquantity(1);
	New[3].setquantity(4);
	New[4].setquantity(2);

	flag = 0;
	//Sorting begin
    //Could of just set quantities in order but needed the practice
    do{
		flag = false;
		for (int i = 0; i < SIZE - 1; i++){
			if (New[i + 1].getquantity() < New[i].getquantity()){
				temp = New[i].getquantity();
				New[i].setquantity(New[i + 1].getquantity());
				New[i + 1].setquantity(temp);
				flag = true;
			}
   }
	} while (flag);


      //printing sorted array to ensure sort completed correctly.       
     /*
	for (int i = 0; i<SIZE; i++){
		cout << " " << New[i].getquantity();
	}*/
	
	
	//prompting user for input
    cout<<endl<<"Enter a quantity to search for: ";
    cin>>search;

//begin binary search
	while(!flag && first<=last){
	  middle=(first+last)/2;
		if(New[middle].getquantity()==search){
		flag=true;
		position = middle+1;
	}
		else if(New[middle].getquantity()>search){
     		last = middle-1;
     	}
		else{first=middle+1;}
	}


 	if(flag){
          cout<<"Number was found at position# "<<position<<endl;
          }
          else{
          	cout<<"Number was NOT found"<<endl;
    }

system("PAUSE");
	return 0;
}


//Assignment: #8, Chapter 9, Problem A
//Name: Alan Thomas
//3/24/2015
//Purpose: Allow for a user to search a class for a value
//         utilizing binary search.


#include <iostream>

using namespace std;
//inventory class start
class Inventory{
private:
	int quantity;
public:
	void setquantity(int q);
	int getquantity();
};
void Inventory::setquantity(int q){
	quantity = q;
}

int Inventory::getquantity(){
	return quantity;
}


//begin execution
int main(){
	const int SIZE = 5;
	bool flag;
	int temp, temp2,search, first=0, middle, position =-1;;
    int last =SIZE-1;   
	Inventory New[SIZE];
	//setting values
    New[0].setquantity(5);
	New[1].setquantity(8);
	New[2].setquantity(1);
	New[3].setquantity(4);
	New[4].setquantity(2);

	flag = 0;
	//Sorting begin
    //Could of just set quantities in order but needed the practice
    do{
		flag = false;
		for (int i = 0; i < SIZE - 1; i++){
			if (New[i + 1].getquantity() < New[i].getquantity()){
				temp = New[i].getquantity();
				New[i].setquantity(New[i + 1].getquantity());
				New[i + 1].setquantity(temp);
				flag = true;
			}
   }
	} while (flag);


      //printing sorted array to ensure sort completed correctly.       
     /*
	for (int i = 0; i<SIZE; i++){
		cout << " " << New[i].getquantity();
	}*/
	
	
	//prompting user for input
    cout<<endl<<"Enter a quantity to search for: ";
    cin>>search;

//begin binary search
	while(!flag && first<=last){
	  middle=(first+last)/2;
		if(New[middle].getquantity()==search){
		flag=true;
		position = middle+1;
	}
		else if(New[middle].getquantity()>search){
     		last = middle-1;
     	}
		else{first=middle+1;}
	}


 	if(flag){
          cout<<"Number was found at position# "<<position<<endl;
          }
          else{
          	cout<<"Number was NOT found"<<endl;
    }

system("PAUSE");
	return 0;
}


//Assignment: #8, Chapter 9, Problem 8
//Name: Alan Thomas
//3/24/2015
//Purpose: Allow for a user to search for a certain number
//         utilizing a binary and linear search function.
//         it will than display the position and the number
//         loops needed in order to find the value.


#include <iostream>

using namespace std;

//utilized a global for simplicity
int array[20]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};




//Linear search function begins
void linesearch(int num){
	int j=0,position;
	bool flag=false;
	const int SIZE=20;
	cout<<endl<<"[LINEAR SEARCH]";

	for(int i=0;i<SIZE;i++){
		if(num==array[i]){
			flag=true;
			position=i+1;
			break; //breaking out of the loop since value was found
		}	
		else if(flag!=array[i]){
			j++;  //counter for loops
		}
	}


	if(flag==true){
		cout<<endl<<"The Value was found at position# "<<position<<endl;
	}
	else{
		cout<<endl<<"Value NOT found"<<endl;
	}
		cout<<"Linear search required "<<j<<" "<<"loops to find the value "<<num<<"."<<endl;
		cout<<"_____________________________________________________________";
	}

//Binary function begins
void binarysearch(int num){
	int j,first=0, middle, position =-1;
	bool flag;
	const int SIZE=20;
	int last = SIZE-1; 
	cout<<endl<<endl<<"[BINARY SEARCH]"<<endl;	
//begin binary search
	while(!flag && first<=last){
		middle=(first+last)/2;
		j++;  //counter till value found
			if(array[middle]==num){
				flag=true;
				position = middle+1;
				break; //breaking loop since value found
			}
			else if(array[middle]>num){
     			last = middle-1;
     		}
			else{first=middle+1;}
			}

			if(flag){
          		cout<<"Number was found at position# "<<position<<endl;
          	}
          	else{
          		cout<<"Number was NOT found"<<endl;
   			 }
				cout<<"Binary search required "<<j<<" "<<"loops to find the value "<<num<<"."<<endl<<endl<<endl;
			}



//main function
int main(){
int x;

cout<<"Enter a number to search for: ";
cin>>x;


linesearch(x);	//sending variable to line function
binarysearch(x);  //sending 
system("PAUSE");
return 0;	
	
}










 

