#include <iostream>
#include <time.h>


using namespace std;

struct tree {
	int data;
	tree* right;
	tree* left;
};
typedef struct tree node;

node* createroot(tree* root)
{
	int randomnumber;
	srand(time(NULL));
	randomnumber = rand()%100 + 1;
	root->data = randomnumber;
	root->right = NULL;
	root->left = NULL;
	return root;
}


void insert(node ** tree, int val)
{
	node *temp = NULL;
	if (!(*tree))
	{
		temp = new node;
		temp->left = temp->right = NULL;
		temp->data = val;
		*tree = temp;
		return;
	}

	if (val < (*tree)->data)
	{
		insert(&(*tree)->left, val);
	}
	else if (val >(*tree)->data)
	{
		insert(&(*tree)->right, val);
	}

}


node* deleteNode(node** tree, int val)
{
	if (!(*tree))
	{
		return NULL;
	}

	if (val < (*tree)->data)
	{
		deleteNode(&((*tree)->left), val);
	}
	else if (val >(*tree)->data)
	{
		deleteNode(&((*tree)->right), val);
	}
	else if (val == (*tree)->data)
	{
		return *tree;
	}
}

void print_preorder(node * tree)
{
	if (tree)
	{
		printf("%d\n", tree->data);
		print_preorder(tree->left);
		print_preorder(tree->right);
	}

}

void print_inorder(node * tree)
{
	if (tree)
	{
		print_inorder(tree->left);
		printf("%d\n", tree->data);
		print_inorder(tree->right);
	}
}

void print_postorder(node * tree)
{
	if (tree)
	{
		print_postorder(tree->left);
		print_postorder(tree->right);
		printf("%d\n", tree->data);
	}
}

void deltree(node * tree)
{
	if (tree)
	{
		deltree(tree->left);
		deltree(tree->right);
		free(tree);
	}
}



void main()
{
	char menuchoice;
	int user_number;
	node *root;
	root = new node;
	root = NULL;
	

	//root = createroot(root); //setting the root's pointers to NULL and placing a random number
	
	
	
	srand(time(NULL));
	int randomnumber;
	
	
	for (int i = 1; i <= 10; i++) //building initial tree
	{
		insert(&root, randomnumber = rand() % 100 + 1); //inserting random numbers into the tree
	}



	cout << "--Tree Program--\n";
	cout << "(A) Insert node into the tree\n";
	cout << "(B) Delete a node from the tree\n";
	cout << "(C) Print tree in preorder\n";
	cout << "(D) Print tree in inorder\n";
	cout << "(E) Print tree in postorder\n";
	cout << "(Q) Exit\n";

	do {
		cout << "\n\nEnter selection: ";
		cin >> menuchoice;
		menuchoice = (char)toupper(menuchoice);
		switch (menuchoice)
		{
			//calls function to input integers into the tree
		case'A':
			cout << "Enter an integer to place into the tree: ";
			cin >> user_number;
			insert(&root, user_number);
			break;

			//calls function to delete a node	
		case 'B':
			cout << "Enter an integer to delete from the tree: ";
			cin >> user_number;
			deleteNode(&root,user_number);
			break;

		case 'C':
			print_preorder(root);
			break;

		case 'D':
			print_inorder(root);
			break;

		case 'E':
			print_postorder(root);
			break;

			//user entered an invalid input
		default:
			cout << "\nInvalid input\n\n";
		}
	} while (menuchoice != 'Q'); //ending swith statement



	
	/* Deleting all nodes of tree */
	deltree(root);
}























#include <iostream>
#include <time.h>


using namespace std;

struct tree {
	int data;
	tree* right;
	tree* left;
};
typedef struct tree node;

node* createroot(tree* root)
{
	int randomnumber;
	srand(time(NULL));
	randomnumber = rand() % 100 + 1;
	root->data = randomnumber;
	root->right = NULL;
	root->left = NULL;
	return root;
}


void insert(node ** tree, int val)
{
	node *temp = NULL;
	if (!(*tree))
	{
		temp = new node;
		temp->left = temp->right = NULL;
		temp->data = val;
		*tree = temp;
		return;
	}

	if (val < (*tree)->data)
	{
		insert(&(*tree)->left, val);
	}
	else if (val >(*tree)->data)
	{
		insert(&(*tree)->right, val);
	}

}


node* deleteNode(node** tree, int val)
{
	if (!(*tree))
	{
		return NULL;
	}

	if (val < (*tree)->data)
	{
		deleteNode(&((*tree)->left), val);
	}
	else if (val >(*tree)->data)
	{
		deleteNode(&((*tree)->right), val);
	}
	else if (val == (*tree)->data)
	{
		return *tree;
	}
}

void print_preorder(node * tree)
{
	if (tree)
	{
		printf("%d\n", tree->data);
		print_preorder(tree->left);
		print_preorder(tree->right);
	}

}

void print_inorder(node * tree)
{
	if (tree)
	{
		print_inorder(tree->left);
		printf("%d\n", tree->data);
		print_inorder(tree->right);
	}
}

void print_postorder(node * tree)
{
	if (tree)
	{
		print_postorder(tree->left);
		print_postorder(tree->right);
		printf("%d\n", tree->data);
	}
}

void deltree(node * tree)
{
	if (tree)
	{
		deltree(tree->left);
		deltree(tree->right);
		free(tree);
	}
}



void main()
{
	char menuchoice;
	int user_number;
	node *root;
	root = new node;
	root = NULL;


	//root = createroot(root); //setting the root's pointers to NULL and placing a random number



	srand(time(NULL));
	int randomnumber;


	for (int i = 1; i <= 10; i++) //building initial tree
	{
		insert(&root, randomnumber = rand() % 100 + 1); //inserting random numbers into the tree
		cout << "("<<randomnumber << ") placed into the tree.\n";
	}



	cout << "\n--Tree Program--\n";
	cout << "(A) Insert node into the tree\n";
	cout << "(B) Delete a node from the tree\n";
	cout << "(C) Print tree in preorder\n";
	cout << "(D) Print tree in inorder\n";
	cout << "(E) Print tree in postorder\n";
	cout << "(Q) Exit\n";

	do {
		cout << "\n\nEnter selection: ";
		cin >> menuchoice;
		menuchoice = (char)toupper(menuchoice);
		switch (menuchoice)
		{
			//calls function to input integers into the tree
		case'A':
			cout << "Enter an integer to place into the tree: ";
			cin >> user_number;
			insert(&root, user_number);
			break;

			//calls function to delete a node	
		case 'B':
			cout << "Enter an integer to delete from the tree: ";
			cin >> user_number;
			deleteNode(&root, user_number);
			break;

		case 'C':
			print_preorder(root);
			break;

		case 'D':
			print_inorder(root);
			break;

		case 'E':
			print_postorder(root);
			break;

			//user entered an invalid input
		default:
			cout << "\nInvalid input\n\n";
		}
	} while (menuchoice != 'Q'); //ending swith statement




								 /* Deleting all nodes of tree */
	deltree(root);
}